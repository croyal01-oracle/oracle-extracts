-- SQL to extract Invoice/CM information
-- Enter begin and end dates with single quotes e.g. '10/17/2002' and '05/31/2003'
SELECT SUBSTR(D.NAME,1,15) SOURCE, SUBSTR(E.MEANING,1,15) CLASS, C.NAME TRANSACTION_TYPE
   , B.INVOICE_CURRENCY_CODE CURRENCY_CODE, NVL(B.EXCHANGE_RATE,1) EXCHANGE_RATE, B.EXCHANGE_DATE, B.EXCHANGE_RATE_TYPE
   , B.AMOUNT_DUE_ORIGINAL TOTAL_AMOUNT_ENTERED
   , ROUND((B.AMOUNT_DUE_ORIGINAL * NVL(B.EXCHANGE_RATE,1)),2) TOTAL_AMOUNT_FUNCTIONAL
   , 'POSTED_TO_GL' GL_STATUS
   , A.TRX_NUMBER, TRUNC(A.TRX_DATE) TRX_DATE, B.GL_DATE, A.POSTING_CONTROL_ID, A.COMPLETE_FLAG, A.ORIG_SYSTEM_BATCH_NAME
   , CUST.ACCOUNT_NUMBER CUSTOMER_NUMBER, F.SALES_ORDER ORDER_NUMBER
FROM RA_CUSTOMER_TRX_ALL A, AR_PAYMENT_SCHEDULES_ALL B, RA_CUST_TRX_TYPES_ALL C
   , RA_BATCH_SOURCES_ALL D, AR_LOOKUPS E, HZ_CUST_ACCOUNTS CUST, RA_CUSTOMER_TRX_LINES_ALL F
WHERE A.TRX_DATE BETWEEN to_date(&begin_date, 'MM/DD/YYYY') AND to_date(&end_date, 'MM/DD/YYYY')
AND A.COMPLETE_FLAG = 'Y'
AND A.CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
AND C.CUST_TRX_TYPE_ID = A.CUST_TRX_TYPE_ID
AND D.BATCH_SOURCE_ID = A.BATCH_SOURCE_ID
AND E.LOOKUP_TYPE = 'INV/CM'
AND E.LOOKUP_CODE = C.TYPE
AND C.ORG_ID = 101
AND D.ORG_ID = 101
AND CUST.CUST_ACCOUNT_ID = A.BILL_TO_CUSTOMER_ID
AND F.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
AND F.CUSTOMER_TRX_LINE_ID = (SELECT MIN(G.CUSTOMER_TRX_LINE_ID) 
    FROM RA_CUSTOMER_TRX_LINES_ALL G
    WHERE G.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
    AND G.LINE_TYPE = 'LINE')
AND EXISTS (SELECT 1 FROM RA_CUST_TRX_LINE_GL_DIST_ALL Z
    WHERE Z.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
    AND Z.GL_POSTED_DATE IS NOT NULL)
--GROUP BY D.NAME, E.MEANING, C.NAME, B.INVOICE_CURRENCY_CODE, NVL(B.EXCHANGE_RATE,1), B.EXCHANGE_DATE, B.EXCHANGE_RATE_TYPE
UNION ALL
SELECT SUBSTR(D.NAME,1,15) SOURCE, SUBSTR(E.MEANING,1,15) CLASS, C.NAME TRANSACTION_TYPE
   , B.INVOICE_CURRENCY_CODE CURRENCY_CODE, NVL(B.EXCHANGE_RATE,1) EXCHANGE_RATE, B.EXCHANGE_DATE, B.EXCHANGE_RATE_TYPE
   , B.AMOUNT_DUE_ORIGINAL TOTAL_AMOUNT_ENTERED
   , ROUND((B.AMOUNT_DUE_ORIGINAL * NVL(B.EXCHANGE_RATE,1)),2) TOTAL_AMOUNT_FUNCTIONAL
   , 'NOT_POSTED_TO_GL' GL_STATUS
   , A.TRX_NUMBER, TRUNC(A.TRX_DATE) TRX_DATE, B.GL_DATE, A.POSTING_CONTROL_ID, A.COMPLETE_FLAG, A.ORIG_SYSTEM_BATCH_NAME
   , CUST.ACCOUNT_NUMBER CUSTOMER_NUMBER, F.SALES_ORDER ORDER_NUMBER
FROM RA_CUSTOMER_TRX_ALL A, AR_PAYMENT_SCHEDULES_ALL B, RA_CUST_TRX_TYPES_ALL C
   , RA_BATCH_SOURCES_ALL D, AR_LOOKUPS E, HZ_CUST_ACCOUNTS CUST, RA_CUSTOMER_TRX_LINES_ALL F
WHERE A.TRX_DATE BETWEEN to_date(&begin_date, 'MM/DD/YYYY') AND to_date(&end_date, 'MM/DD/YYYY')
AND A.COMPLETE_FLAG = 'Y'
AND A.CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
AND C.CUST_TRX_TYPE_ID = A.CUST_TRX_TYPE_ID
AND D.BATCH_SOURCE_ID = A.BATCH_SOURCE_ID
AND E.LOOKUP_TYPE = 'INV/CM'
AND E.LOOKUP_CODE = C.TYPE
AND C.ORG_ID = 101
AND D.ORG_ID = 101
AND CUST.CUST_ACCOUNT_ID = A.BILL_TO_CUSTOMER_ID
AND F.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
AND F.CUSTOMER_TRX_LINE_ID = (SELECT MIN(G.CUSTOMER_TRX_LINE_ID) 
    FROM RA_CUSTOMER_TRX_LINES_ALL G
    WHERE G.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
    AND G.LINE_TYPE = 'LINE')
AND EXISTS (SELECT 1 FROM RA_CUST_TRX_LINE_GL_DIST_ALL Z
    WHERE Z.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
    AND Z.GL_POSTED_DATE IS NULL)
--GROUP BY D.NAME, E.MEANING, C.NAME, B.INVOICE_CURRENCY_CODE, NVL(B.EXCHANGE_RATE,1), B.EXCHANGE_DATE, B.EXCHANGE_RATE_TYPE
UNION ALL
SELECT SUBSTR(D.NAME,1,15) SOURCE, SUBSTR(E.MEANING,1,15) CLASS, C.NAME TRANSACTION_TYPE
   , A.INVOICE_CURRENCY_CODE CURRENCY_CODE, NVL(A.EXCHANGE_RATE,1) EXCHANGE_RATE, A.EXCHANGE_DATE, A.EXCHANGE_RATE_TYPE
   , SUM(Y.EXTENDED_AMOUNT) TOTAL_AMOUNT_ENTERED
   , SUM(NVL(Y.EXTENDED_ACCTD_AMOUNT, Y.EXTENDED_AMOUNT)) TOTAL_AMOUNT_FUNCTIONAL
   , 'NOT_POSTED_TO_GL-NOT_OPEN_AR' GL_STATUS
   , A.TRX_NUMBER, TRUNC(A.TRX_DATE) TRX_DATE, TO_DATE(NULL, 'MM/DD/YYYY') GL_DATE, A.POSTING_CONTROL_ID, A.COMPLETE_FLAG
   , A.ORIG_SYSTEM_BATCH_NAME, CUST.ACCOUNT_NUMBER CUSTOMER_NUMBER, Y.SALES_ORDER ORDER_NUMBER
FROM RA_CUSTOMER_TRX_ALL A, RA_CUST_TRX_TYPES_ALL C
   , RA_BATCH_SOURCES_ALL D, AR_LOOKUPS E, RA_CUSTOMER_TRX_LINES_ALL Y, HZ_CUST_ACCOUNTS CUST
WHERE A.TRX_DATE BETWEEN to_date(&begin_date, 'MM/DD/YYYY') AND to_date(&end_date, 'MM/DD/YYYY')
AND A.COMPLETE_FLAG = 'Y'
AND A.CUSTOMER_TRX_ID = Y.CUSTOMER_TRX_ID
AND C.CUST_TRX_TYPE_ID = A.CUST_TRX_TYPE_ID
AND D.BATCH_SOURCE_ID = A.BATCH_SOURCE_ID
AND E.LOOKUP_TYPE = 'INV/CM'
AND E.LOOKUP_CODE = C.TYPE
AND C.ORG_ID = 101
AND D.ORG_ID = 101
AND CUST.CUST_ACCOUNT_ID = A.BILL_TO_CUSTOMER_ID
AND NOT EXISTS (SELECT 1 FROM AR_PAYMENT_SCHEDULES_ALL B
    WHERE B.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID)
GROUP BY D.NAME, E.MEANING, C.NAME, A.INVOICE_CURRENCY_CODE, NVL(A.EXCHANGE_RATE,1), A.EXCHANGE_DATE, A.EXCHANGE_RATE_TYPE
   , A.TRX_NUMBER, TRUNC(A.TRX_DATE), A.POSTING_CONTROL_ID, A.COMPLETE_FLAG
   , A.ORIG_SYSTEM_BATCH_NAME, CUST.ACCOUNT_NUMBER, Y.SALES_ORDER
UNION ALL
SELECT SUBSTR(D.NAME,1,15) SOURCE, SUBSTR(E.MEANING,1,15) CLASS, C.NAME TRANSACTION_TYPE
   , B.INVOICE_CURRENCY_CODE CURRENCY_CODE, NVL(B.EXCHANGE_RATE,1) EXCHANGE_RATE, B.EXCHANGE_DATE, B.EXCHANGE_RATE_TYPE
   , B.AMOUNT_DUE_ORIGINAL TOTAL_AMOUNT_ENTERED
   , ROUND((B.AMOUNT_DUE_ORIGINAL * NVL(B.EXCHANGE_RATE,1)),2) TOTAL_AMOUNT_FUNCTIONAL
   , 'POSTED_TO_GL' GL_STATUS
   , A.TRX_NUMBER, TRUNC(A.TRX_DATE) TRX_DATE, B.GL_DATE, A.POSTING_CONTROL_ID, A.COMPLETE_FLAG, A.ORIG_SYSTEM_BATCH_NAME
   , CUST.ACCOUNT_NUMBER CUSTOMER_NUMBER, A.INTERFACE_HEADER_ATTRIBUTE2 ORDER_NUMBER
FROM RA_CUSTOMER_TRX_ALL A, AR_PAYMENT_SCHEDULES_ALL B, RA_CUST_TRX_TYPES_ALL C
   , RA_BATCH_SOURCES_ALL D, AR_LOOKUPS E, HZ_CUST_ACCOUNTS CUST
WHERE A.TRX_DATE BETWEEN to_date(&begin_date, 'MM/DD/YYYY') AND to_date(&end_date, 'MM/DD/YYYY')
AND A.COMPLETE_FLAG = 'Y'
AND A.CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
AND C.CUST_TRX_TYPE_ID = A.CUST_TRX_TYPE_ID
AND D.BATCH_SOURCE_ID = A.BATCH_SOURCE_ID
AND E.LOOKUP_TYPE = 'INV/CM'
AND E.LOOKUP_CODE = C.TYPE
AND C.ORG_ID = 101
AND D.ORG_ID = 101
AND CUST.CUST_ACCOUNT_ID = A.BILL_TO_CUSTOMER_ID
AND NOT EXISTS (SELECT 1
    FROM RA_CUSTOMER_TRX_LINES_ALL G
    WHERE G.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
    AND G.LINE_TYPE = 'LINE')
AND EXISTS (SELECT 1 FROM RA_CUST_TRX_LINE_GL_DIST_ALL Z
    WHERE Z.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
    AND Z.GL_POSTED_DATE IS NOT NULL)
UNION ALL
SELECT SUBSTR(D.NAME,1,15) SOURCE, SUBSTR(E.MEANING,1,15) CLASS, C.NAME TRANSACTION_TYPE
   , B.INVOICE_CURRENCY_CODE CURRENCY_CODE, NVL(B.EXCHANGE_RATE,1) EXCHANGE_RATE, B.EXCHANGE_DATE, B.EXCHANGE_RATE_TYPE
   , B.AMOUNT_DUE_ORIGINAL TOTAL_AMOUNT_ENTERED
   , ROUND((B.AMOUNT_DUE_ORIGINAL * NVL(B.EXCHANGE_RATE,1)),2) TOTAL_AMOUNT_FUNCTIONAL
   , 'NOT_POSTED_TO_GL' GL_STATUS
   , A.TRX_NUMBER, TRUNC(A.TRX_DATE) TRX_DATE, B.GL_DATE, A.POSTING_CONTROL_ID, A.COMPLETE_FLAG, A.ORIG_SYSTEM_BATCH_NAME
   , CUST.ACCOUNT_NUMBER CUSTOMER_NUMBER, A.INTERFACE_HEADER_ATTRIBUTE2 ORDER_NUMBER
FROM RA_CUSTOMER_TRX_ALL A, AR_PAYMENT_SCHEDULES_ALL B, RA_CUST_TRX_TYPES_ALL C
   , RA_BATCH_SOURCES_ALL D, AR_LOOKUPS E, HZ_CUST_ACCOUNTS CUST
WHERE A.TRX_DATE BETWEEN to_date(&begin_date, 'MM/DD/YYYY') AND to_date(&end_date, 'MM/DD/YYYY')
AND A.COMPLETE_FLAG = 'Y'
AND A.CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
AND C.CUST_TRX_TYPE_ID = A.CUST_TRX_TYPE_ID
AND D.BATCH_SOURCE_ID = A.BATCH_SOURCE_ID
AND E.LOOKUP_TYPE = 'INV/CM'
AND E.LOOKUP_CODE = C.TYPE
AND C.ORG_ID = 101
AND D.ORG_ID = 101
AND CUST.CUST_ACCOUNT_ID = A.BILL_TO_CUSTOMER_ID
AND NOT EXISTS (SELECT 1
    FROM RA_CUSTOMER_TRX_LINES_ALL G
    WHERE G.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
    AND G.LINE_TYPE = 'LINE')
AND EXISTS (SELECT 1 FROM RA_CUST_TRX_LINE_GL_DIST_ALL Z
    WHERE Z.CUSTOMER_TRX_ID = A.CUSTOMER_TRX_ID
    AND Z.GL_POSTED_DATE IS NULL);
